# Continuous Delivery Workflow

# Name of the Pipeline
name: CD-PIPELINE

# Name of each CD run (with commit sha)
run-name: "ðŸš€ Deploy to PyPI and Release | ${{ github.sha }}"

# Trigger event
on:
  push: # event type (push on main is allowed only upon PR merging, due to branch protection rulset)
    branches:
    - main

# Jobs definition
jobs:
  # Build package and publish first (fail fast approach with atomic deployment)
  package-build-and-publish:
    runs-on: ubuntu-latest

    steps:
    # Checkout code to download repository into the Runner
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    # Install uv via pinned version
    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "0.8.14"

    # Install Python via Project toml version
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version-file: "pyproject.toml"
    
      # Install Project dependencies with dev group
    - name: Install the Dependencies
      run: uv sync --group dev

    # Run build with dist check
    - name: Build Package Distribution
      run: bash scripts/build.sh

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: uv run twine upload dist/*

  # Deploy documentation to GitHub Pages
  deploy-docs:
    runs-on: ubuntu-latest
    needs: package-build-and-publish
    permissions:
      contents: write

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "0.8.14"

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version-file: "pyproject.toml"

    - name: Install Dependencies
      run: uv sync --group dev

    - name: Deploy Documentation
      run: uv run mkdocs gh-deploy

  # Create GitHub release with tag based on CHANGELOG latest content
  create-release:
    runs-on: ubuntu-latest
    needs: [package-build-and-publish, deploy-docs]
    permissions:
      contents: write

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Extract Version and Release Notes
      id: extract
      run: |
        # Extract latest version from CHANGELOG.md
        VERSION=$(grep -m 1 "^## \[" CHANGELOG.md | sed 's/^## \[\(.*\)\] - .*/\1/')
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Extract release notes for the latest version
        awk '/^## \[/{if(p) exit; p=1; next} p && /^## \[/{exit} p' CHANGELOG.md > release_notes.md
        
        echo "Release notes for version $VERSION:"
        cat release_notes.md

    - name: Create Git Tag
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a "v${{ steps.extract.outputs.version }}" -m "Release v${{ steps.extract.outputs.version }}"
        git push origin "v${{ steps.extract.outputs.version }}"

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: "v${{ steps.extract.outputs.version }}"
        name: "v${{ steps.extract.outputs.version }}"
        body_path: release_notes.md
        draft: false
        prerelease: false