# Continuous Integration Workflow

# Name of the Pipeline
name: CI-PIPELINE

# Name of each CI run (with PR title and PR number)
run-name: "🧪 Tests & Linting | ${{ github.event.pull_request.title }} (PR #${{ github.event.number }})"

# Trigger event
on:
  pull_request: # event types
    types:
      - opened # opening a PR triggers CI
      - edited # editing an opened PR triggers CI (e.g., PR title, description, etc.)
      - synchronize # sync an opened PR triggers CI (i.e., new commits to PR branch)
    branches: # target branchs
      - main # CI triggered on PR opened or edited on main branch

# Jobs definition
jobs:
  run-test-matrix:
    runs-on: ${{ matrix.os }} # allows different test scenarios
    name: Run Test on Python ${{ matrix.python-version }} for ${{ matrix.os }} # specify name with OS and Python version
    strategy:
      fail-fast: false # combinations run independently of others success or failure
      matrix:
        os: [ubuntu-latest, macos-latest] # cross-platform compatibility
        python-version: ["3.10", "3.11", "3.12"] # multiple Python versions support

    steps:
    # Checkout code to download repository into the Runner
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Install uv via pinned version
    - name: ⚡ Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "0.8.14"

    # Install Python via matrix version
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }} # Python version from matrix

  # Install Project dependencies with dev group
    - name: 📦 Install the Project
      run: |
        echo "📦 Installing project..."
        uv sync --group dev
        uv pip install -e .
        echo "✅ Project installation completed"

    - name: 🧪 Run Unit-Tests with Coverage Report
      run: |
        echo "🧪 Running unit tests with coverage..."
        uv run coverage run --rcfile=./pyproject.toml -m pytest --disable-pytest-warnings && uv run coverage report && rm -f .coverage
        echo "✅ Tests completed successfully"

  run-linters:
    runs-on: ubuntu-latest # VM type
    name: Run Linters

    steps:
    # Checkout code to download repository into the Runner
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Install uv via pinned version
    - name: ⚡ Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "0.8.14"

  # Install Python via Project toml version
    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version-file: "pyproject.toml"

  # Install Project dependencies with dev group
    - name: 📦 Install the Dependencies
      run: |
        echo "📦 Installing dependencies..."
        uv sync --group dev
        echo "✅ Dependencies installed"

    - name: 🔨 Run Linters via Ruff
      run: |
        echo "🔨 Running linters..."
        uv run ruff check src/tidy_cli --fix
        echo "✅ Linting completed"

    - name: 🎨 Run Formatters via Ruff
      run: |
        echo "🎨 Running formatters..."
        uv run ruff format src/tidy_cli
        echo "✅ Formatting completed"

    - name: 🔍 Run Type Checking via MyPy
      run: |
        echo "🔍 Running type checking..."
        uv run mypy src/tidy_cli --pretty
        echo "✅ Type checking completed"

  version-check:
    runs-on: ubuntu-latest  # VM type
    name: Version Check
    
    steps:
    # Checkout code to download repository into the Runner
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Install uv via pinned version
    - name: ⚡ Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "0.8.14"

  # Install Python via Project toml version
    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version-file: "pyproject.toml"

  # Install Project dependencies with dev group
    - name: 📦 Install the Dependencies
      run: |
        echo "📦 Installing dependencies..."
        uv sync --group dev
        echo "✅ Dependencies installed"

  # Check that the version has been properly bumped and matches CHANGELOG.md
    - name: 🔢 Check Version Bump and Validate
      run: |
        echo "🔢 Starting version validation..."
        # Get latest version from pyproject.toml on current branch
        CURRENT_VERSION=$(uv run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
        
        # Get latest version from CHANGELOG.md
        CHANGELOG_VERSION=$(grep -m 1 "^## \[" CHANGELOG.md | sed 's/^## \[\(.*\)\] - .*/\1/')
        
        # Validate versions match
        if [ "$CURRENT_VERSION" != "$CHANGELOG_VERSION" ]; then
          echo "❌ Version mismatch: pyproject.toml has '$CURRENT_VERSION' but CHANGELOG.md has '$CHANGELOG_VERSION'"
          exit 1
        fi
        
        # Get latest version from main branch
        git fetch origin main
        MAIN_VERSION=$(git show origin/main:pyproject.toml | uv run python -c "import tomllib, sys; print(tomllib.load(sys.stdin.buffer)['project']['version'])")
        
        echo "📤 Current version: '$CURRENT_VERSION'"
        echo "📩 Main version: '$MAIN_VERSION'"
        
        if [ "$CURRENT_VERSION" = "$MAIN_VERSION" ]; then
          echo "❌ Version not bumped! Please update the version in 'pyproject.toml'"
          exit 1
        else
          echo "✅ Version bumped from '$MAIN_VERSION' to '$CURRENT_VERSION' and matches CHANGELOG.md"
        fi