{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Tidy CLI Docs","text":"Keep your code clean and robust! <p>Tidy CLI simplifies your development process by combining essential tools like ruff, mypy, pydoclint, and pytest into a single, easy-to-use command-line interface. Perfect for maintaining code quality and running tests across Python projects of any size.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li> Unified Linting: Combines ruff, mypy, and pydoclint in one command</li> <li> Smart Formatting: Automatic code formatting with ruff</li> <li> Integrated Testing: Run pytest with coverage reporting</li> <li> Auto-fix: Automatically fix linting issues where possible</li> <li> Interactive Mode: Review and apply fixes interactively</li> <li> Flexible Execution: Target specific files, directories, or entire projects</li> <li> Configurable: Skip tools, customize paths, and adapt to your workflow</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>pip install tidy-cli  # Python 3.10+\ntidy-cli init         # Setup project\ntidy-cli lint run     # Check code quality\ntidy-cli pytest run  # Run tests\n</code></pre>"},{"location":"#documentation-structure","title":"Documentation Structure","text":"<ul> <li> Tutorials - Step-by-step guides to get you started</li> <li> How-to Guides - Practical solutions for common tasks</li> <li> Reference - Complete command and configuration reference</li> <li> Explanation - Understanding the concepts behind Tidy CLI</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! Check out our GitHub repository to get started.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License.</p>"},{"location":"explanation/","title":"Explanation","text":"<p>Understanding the concepts and philosophy behind Tidy CLI.</p>"},{"location":"explanation/#why-tidy-cli-exists","title":"Why Tidy CLI Exists","text":""},{"location":"explanation/#the-problem","title":"The Problem","text":"<p>Modern Python development involves multiple quality assurance tools:</p> <ul> <li>Ruff for linting and formatting</li> <li>MyPy for static type checking  </li> <li>Pydoclint for docstring validation</li> <li>Pytest for testing with coverage</li> </ul> <p>Each tool requires separate installation, configuration, and execution. Developers often struggle with:</p> <ul> <li>Remembering different command syntaxes</li> <li>Managing tool-specific configurations</li> <li>Ensuring consistent execution across team members</li> <li>Setting up CI/CD pipelines with multiple tool calls</li> </ul>"},{"location":"explanation/#the-solution","title":"The Solution","text":"<p>Tidy CLI unifies these essential tools under a single, intuitive interface. Instead of running:</p> <pre><code>ruff check src/ --fix\nruff format src/\nmypy src/\npydoclint src/\npytest tests/ --cov=src --cov-report=html\n</code></pre> <p>You simply run:</p> <pre><code>tidy-cli lint run --fix\ntidy-cli pytest run\n</code></pre>"},{"location":"explanation/#design-philosophy","title":"Design Philosophy","text":""},{"location":"explanation/#simplicity-first","title":"Simplicity First","text":"<p>Tidy CLI prioritizes ease of use over extensive customization. The tool makes opinionated choices about:</p> <ul> <li>Default configurations: Sensible defaults that work for most Python projects</li> <li>Command structure: Intuitive verb-noun patterns (<code>lint run</code>, <code>pytest run</code>)</li> <li>Output formatting: Clean, readable results from all tools</li> </ul>"},{"location":"explanation/#configuration-over-convention","title":"Configuration Over Convention","text":"<p>While providing defaults, Tidy CLI respects your existing configurations:</p> <ul> <li>Uses your <code>pyproject.toml</code> settings for each tool</li> <li>Allows path customization for different project structures</li> <li>Supports skipping tools that don't fit your workflow</li> </ul>"},{"location":"explanation/#workflow-integration","title":"Workflow Integration","text":"<p>Tidy CLI is designed to fit seamlessly into existing development workflows:</p> <ul> <li>Local development: Quick quality checks during coding</li> <li>Pre-commit hooks: Automated fixing before commits</li> <li>CI/CD pipelines: Consistent quality gates</li> <li>IDE integration: Works with existing tool configurations</li> </ul>"},{"location":"explanation/#tool-selection","title":"Tool Selection","text":"<p>Tidy CLI integrates best-in-class Python tools:</p> <ul> <li>Ruff: Fast, comprehensive linting and formatting</li> <li>MyPy: Industry-standard static type checking</li> <li>Pydoclint: Docstring validation and consistency</li> <li>Pytest: Flexible testing with coverage reporting</li> </ul> <p>Each tool was selected for performance, reliability, and ecosystem adoption.</p>"},{"location":"explanation/#architecture-overview","title":"Architecture Overview","text":""},{"location":"explanation/#project-structure","title":"Project Structure","text":"<p>Tidy CLI expects a conventional Python project structure:</p> <pre><code>project/\n\u251c\u2500\u2500 src/           # Source code\n\u2502    \u2514\u2500\u2500 tests/    # Test files  \n\u251c\u2500\u2500 local/         # Tidy CLI settings\n\u2514\u2500\u2500 pyproject.toml # Tool configurations\n</code></pre> <p>This structure promotes:</p> <ul> <li>Separation of concerns: Clear boundaries between source and tests</li> <li>Tool compatibility: Standard layout works with all integrated tools</li> <li>Scalability: Structure scales from small scripts to large applications</li> </ul>"},{"location":"explanation/#configuration-management","title":"Configuration Management","text":"<p>Tidy CLI uses a two-tier configuration system:</p> <ol> <li>Tidy CLI settings (<code>local/tidy_cli_settings.json</code>): Path and execution preferences</li> <li>Tool configurations (<code>pyproject.toml</code>): Individual tool settings</li> </ol> <p>This separation allows:</p> <ul> <li>Project-specific paths: Adapt to different project layouts</li> <li>Tool independence: Maintain existing tool configurations</li> <li>Team consistency: Share Tidy CLI settings while preserving individual tool preferences</li> </ul>"},{"location":"explanation/#execution-model","title":"Execution Model","text":"<p>Tidy CLI follows a simple execution model:</p> <ol> <li>Load settings: Read project-specific configuration</li> <li>Resolve paths: Determine target files/directories</li> <li>Execute tools: Run tools in logical order</li> <li>Aggregate results: Combine outputs into unified report</li> </ol>"},{"location":"explanation/#design-approach","title":"Design Approach","text":"<p>Tidy CLI complements existing tools rather than replacing them:</p> <ul> <li>vs. Make/Scripts: Cross-platform, no maintenance overhead</li> <li>vs. Pre-commit: Use together for complete workflow coverage</li> <li>vs. All-in-One: Best-of-breed tools with unified interface</li> </ul>"},{"location":"how-to-guides/","title":"How-To Guides","text":"<p>Practical solutions for common tasks with Tidy CLI.</p>"},{"location":"how-to-guides/#linting-code-quality","title":"Linting &amp; Code Quality","text":""},{"location":"how-to-guides/#how-to-run-specific-linters","title":"How to run specific linters","text":"<p>Skip tools you don't need:</p> <pre><code># Skip Ruff (linting)\ntidy-cli lint run --skip-ruff\n\n# Skip Ruff (formatting)\ntidy-cli lint run --skip-format\n\n# Skip MyPy type checking\ntidy-cli lint run --skip-mypy\n\n# Skip Pydoclint docstring checking\ntidy-cli lint run --skip-pydoclint\n\n# Skip multiple tools\ntidy-cli lint run --skip-mypy --skip-pydoclint\n</code></pre>"},{"location":"how-to-guides/#how-to-lint-specific-files-or-directories","title":"How to lint specific files or directories","text":"<p>Target specific paths:</p> <pre><code># Lint a specific file\ntidy-cli lint run src/my_module.py\n\n# Lint a specific directory\ntidy-cli lint run src/utils/\n\n# Override default directory at runtime\ntidy-cli lint run --default-dir custom_src\n\n# Override pyproject.toml location at runtime\ntidy-cli lint run --pyproject-path custom/pyproject.toml\n</code></pre>"},{"location":"how-to-guides/#how-to-use-interactive-mode","title":"How to use interactive mode","text":"<p>Review each tool before running:</p> <pre><code>tidy-cli lint run --interactive\n</code></pre> <p>This prompts you to confirm each linter execution.</p>"},{"location":"how-to-guides/#how-to-auto-fix-issues","title":"How to auto-fix issues","text":"<p>Let Tidy CLI fix what it can:</p> <pre><code># Fix all auto-fixable issues\ntidy-cli lint run --fix\n\n# Fix issues in specific files\ntidy-cli lint run src/my_module.py --fix\n</code></pre>"},{"location":"how-to-guides/#testing","title":"Testing","text":""},{"location":"how-to-guides/#how-to-run-specific-test-files","title":"How to run specific test files","text":"<p>Target individual test files:</p> <pre><code># Run tests in a directory\ntidy-cli pytest run tests/unit/\n\n# Run a specific test file\ntidy-cli pytest run tests/test_example.py\n\n# Run a specific test function\ntidy-cli pytest run tests/test_example.py::test_function\n\n# Override default test directory at runtime\ntidy-cli pytest run --default-dir custom_tests\n\n# Override pyproject.toml location at runtime\ntidy-cli pytest run --pyproject-path custom/pyproject.toml\n</code></pre>"},{"location":"how-to-guides/#how-to-see-detailed-test-output","title":"How to see detailed test output","text":"<p>Enable logging for test runs:</p> <pre><code># Show logs (only works with specific paths)\ntidy-cli pytest run tests/test_example.py --logs\n\n# Show logs (when running on the entire default folder)\ntidy-cli pytest run -e -s\n</code></pre>"},{"location":"how-to-guides/#how-to-run-tests-with-coverage","title":"How to run tests with coverage","text":"<p>Coverage report out of the box:</p> <pre><code># Tidy CLI always includes coverage report when running on the entire default folder\ntidy-cli pytest run\n</code></pre>"},{"location":"how-to-guides/#how-to-run-tests-with-any-pytest-optins","title":"How to run tests with any Pytest optins","text":"<p>Enable native Pytest options:</p> <pre><code># Tidy CLI allows to add any Pytest native option (example logs and verbosity)\ntidy-cli pytest run -e -s -e -v\n# Or with long option name\ntidy-cli pytest run --extra -s --extra -v\n</code></pre>"},{"location":"how-to-guides/#configuration","title":"Configuration","text":""},{"location":"how-to-guides/#how-to-change-default-settings","title":"How to change default settings","text":"<p>Modify your settings file:</p> <pre><code># Re-initialize to change settings\ntidy-cli init\n\n# Or edit directly: local/tidy_cli_settings.json\n</code></pre>"},{"location":"how-to-guides/#how-to-override-settings-at-runtime","title":"How to override settings at runtime","text":"<p>Override default directories and config paths without changing your saved settings:</p> <pre><code># Override lint default directory\ntidy-cli lint run --default-dir custom_src\n\n# Override pytest default directory\ntidy-cli pytest run --default-dir custom_tests\n\n# Override pyproject.toml location for linting\ntidy-cli lint run --pyproject-path config/custom.toml\n\n# Override pyproject.toml location for testing\ntidy-cli pytest run --pyproject-path ../config/custom.toml\n\n# Combine overrides\ntidy-cli lint run --default-dir backend/src --pyproject-path backend/pyproject.toml\n</code></pre> <p>Note: Runtime overrides are temporary and don't modify your saved settings in <code>local/tidy_cli_settings.json</code>.</p>"},{"location":"how-to-guides/#how-to-configure-tools","title":"How to configure tools","text":"<p>See Reference for complete configuration examples.</p>"},{"location":"how-to-guides/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Missing dependencies: <code>pip install ruff mypy pydoclint pytest pytest-cov</code></li> <li>Path issues: Check <code>local/tidy_cli_settings.json</code> paths</li> </ul>"},{"location":"how-to-guides/#integration","title":"Integration","text":""},{"location":"how-to-guides/#how-to-use-in-cicd","title":"How to use in CI/CD","text":"<p>Add to your workflow:</p> <pre><code># .github/workflows/ci.yml\n- name: Install Tidy CLI\n  run: pip install tidy-cli\n\n- name: Run code quality checks\n  run: tidy-cli lint run\n\n- name: Run tests\n  run: tidy-cli pytest run\n</code></pre>"},{"location":"how-to-guides/#how-to-use-with-pre-commit","title":"How to use with pre-commit","text":"<p>Add to <code>.pre-commit-config.yaml</code>:</p> <pre><code>repos:\n  - repo: local\n    hooks:\n      - id: tidy-cli-lint\n        name: Tidy CLI Lint\n        entry: tidy-cli lint run --fix\n        language: system\n        pass_filenames: false\n</code></pre>"},{"location":"how-to-guides/#how-to-integrate-with-ides","title":"How to integrate with IDEs","text":"<p>Configure your IDE to use Tidy CLI tools:</p> <ul> <li>Ruff: Set as default formatter and linter</li> <li>MyPy: Enable as type checker</li> <li>Pytest: Set as test runner</li> </ul>"},{"location":"reference/","title":"Reference","text":"<p>Complete command and configuration reference for Tidy CLI.</p>"},{"location":"reference/#commands","title":"Commands","text":""},{"location":"reference/#main-commands","title":"Main Commands","text":"Command Description <code>tidy-cli</code> Display help and available commands <code>tidy-cli version</code> Show current version <code>tidy-cli init</code> Initialize project settings (interactive) <code>tidy-cli --install-completion</code> Install shell completion <code>tidy-cli --help</code> Show help about commands (available for each subcommand <code>pytest</code> and <code>lint</code>)"},{"location":"reference/#lint-commands","title":"Lint Commands","text":""},{"location":"reference/#tidy-cli-lint-run","title":"<code>tidy-cli lint run</code>","text":"<p>Run all linting tools (ruff, mypy, pydoclint).</p> <pre><code>tidy-cli lint run [PATH] [OPTIONS]\n</code></pre> <p>Arguments: - <code>PATH</code> (optional): Specific file or directory to lint. Defaults to configured lint path.</p> <p>Options: - <code>--fix</code>: Auto-fix issues where possible - <code>--interactive</code>: Prompt before running each tool - <code>--skip-ruff</code>: Skip Ruff linting - <code>--skip-format</code>: Skip Ruff formatting - <code>--skip-mypy</code>: Skip MyPy type checking - <code>--skip-pydoclint</code>: Skip Pydoclint docstring checking - <code>--default-dir</code>: Override the default lint directory at runtime - <code>--pyproject-path</code>: Override the pyproject.toml path at runtime (relative to current working directory)</p>"},{"location":"reference/#tidy-cli-lint-init","title":"<code>tidy-cli lint init</code>","text":"<p>Initialize lint-specific settings.</p> <pre><code>tidy-cli lint init\n</code></pre>"},{"location":"reference/#pytest-commands","title":"Pytest Commands","text":""},{"location":"reference/#tidy-cli-pytest-run","title":"<code>tidy-cli pytest run</code>","text":"<p>Run tests with coverage reporting.</p> <pre><code>tidy-cli pytest run [PATH] [OPTIONS]\n</code></pre> <p>Arguments: - <code>PATH</code> (optional): Specific test file or directory. Defaults to configured pytest path.</p> <p>Options: - <code>--logs</code>, <code>-l</code>: Show detailed test output (only available when PATH is specified) - <code>--extra</code>, <code>-e</code>: Pass additional pytest options (can be used multiple times) - <code>--default-dir</code>: Override the default test directory at runtime - <code>--pyproject-path</code>: Override the pyproject.toml path at runtime (relative to default directory)</p>"},{"location":"reference/#tidy-cli-pytest-init","title":"<code>tidy-cli pytest init</code>","text":"<p>Initialize pytest-specific settings.</p> <pre><code>tidy-cli pytest init\n</code></pre>"},{"location":"reference/#configuration","title":"Configuration","text":""},{"location":"reference/#settings-file","title":"Settings File","text":"<p>Tidy CLI stores configuration in <code>local/tidy_cli_settings.json</code>:</p> <pre><code>{\n  \"lint_default_path\": \"src\",\n  \"lint_config_path\": \"pyproject.toml\",\n  \"pytest_default_path\": \"tests\", \n  \"pytest_config_path\": \"pyproject.toml\"\n}\n</code></pre> <p>Configuration Options:</p> Setting Description Default <code>lint_default_path</code> Default directory to lint <code>\"src\"</code> <code>lint_config_path</code> Path to pyproject.toml for linting tools <code>\"pyproject.toml\"</code> <code>pytest_default_path</code> Default directory for tests <code>\"tests\"</code> <code>pytest_config_path</code> Path to pyproject.toml for pytest <code>\"pyproject.toml\"</code>"},{"location":"reference/#tool-configuration-example","title":"Tool Configuration Example","text":"<p>Configure underlying tools in <code>pyproject.toml</code> (the below are just examples, so amend them based on your project):</p>"},{"location":"reference/#ruff-configuration","title":"Ruff Configuration","text":"<pre><code>[tool.ruff]\ntarget-version = \"py310\"\nline-length = 175\n\n[tool.ruff.lint]\nselect = [\n    \"E\",  # pycodestyle errors\n    \"W\",  # pycodestyle warnings\n    \"F\",  # pyflakes\n    \"I\",  # isort\n    \"B\",  # flake8-bugbear\n    \"C4\", # flake8-comprehensions\n    \"UP\", # pyupgrade\n]\nignore = [\n    \"B008\",  # do not perform function calls in argument defaults\n]\n</code></pre>"},{"location":"reference/#mypy-configuration","title":"MyPy Configuration","text":"<pre><code>[tool.mypy]\npython_version = \"3.10\"\nwarn_return_any = true\nwarn_unused_configs = true\n</code></pre>"},{"location":"reference/#pydoclint-configuration","title":"Pydoclint Configuration","text":"<pre><code>[tool.pydoclint]\nstyle = \"sphinx\"\narg-type-hints-in-docstring = true\narg-type-hints-in-signature = true\ncheck-arg-order = true\n</code></pre>"},{"location":"reference/#pytest-configuration","title":"Pytest Configuration","text":"<pre><code>[tool.pytest.ini_options]\npython_files = [\"test_*.py\", \"*_test.py\"]\npython_classes = [\"Test*\"]\npython_functions = [\"test_*\"]\n\n[tool.coverage.run]\nomit = [\n    \"tests/*\",\n    \"**/__init__.py\",\n]\n</code></pre>"},{"location":"reference/#exit-codes","title":"Exit Codes","text":"Code Description <code>0</code> Success <code>1</code> General error"},{"location":"reference/#file-structure","title":"File Structure","text":"<p>Expected project structure for default Tidy CLI usage (default paths can be confifured as shown above):</p> <pre><code>project/\n\u251c\u2500\u2500 src/                    # Source code (lint_default_path)\n\u2502   \u2514\u2500\u2500 my_package/\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u2514\u2500\u2500 module.py\n\u251c\u2500\u2500 tests/                  # Test files (pytest_default_path)\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 test_module.py\n\u251c\u2500\u2500 local/                  # Tidy CLI settings\n\u2502   \u2514\u2500\u2500 tidy_cli_settings.json\n\u251c\u2500\u2500 pyproject.toml          # Tool configurations\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"reference/#integration-examples","title":"Integration Examples","text":""},{"location":"reference/#github-actions","title":"GitHub Actions","text":"<pre><code>name: Code Quality\non: [push, pull_request]\n\njobs:\n  quality:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-python@v4\n        with:\n          python-version: '3.11'\n      - name: Install dependencies\n        run: |\n          pip install tidy-cli\n          pip install -r requirements.txt\n      - name: Run linting\n        run: tidy-cli lint run\n      - name: Run tests\n        run: tidy-cli pytest run\n</code></pre>"},{"location":"reference/#pre-commit-hook","title":"Pre-commit Hook","text":"<pre><code># .pre-commit-config.yaml\nrepos:\n  - repo: local\n    hooks:\n      - id: tidy-cli\n        name: Tidy CLI\n        entry: tidy-cli lint run --fix\n        language: system\n        pass_filenames: false\n        always_run: true\n</code></pre>"},{"location":"tutorials/","title":"Tutorials","text":"<p>Step-by-step guides to get you started with Tidy CLI.</p>"},{"location":"tutorials/#getting-started","title":"Getting Started","text":""},{"location":"tutorials/#1-installation","title":"1. Installation","text":"<p>Install Tidy CLI using your preferred package manager:</p>  pip uv <pre><code>pip install tidy-cli\n</code></pre> <pre><code>uv pip install tidy-cli\n# or add to project\nuv add tidy-cli\n</code></pre>"},{"location":"tutorials/#2-first-setup","title":"2. First Setup","text":"<p>Initialize Tidy CLI in your project:</p> <pre><code>tidy-cli init\n</code></pre> <p>This will prompt you for: - Pytest folder path: Directory containing your tests (usually <code>tests</code> or <code>.</code>) - Pyproject.toml location: Path to your configuration file - Default lint path: Directory to lint by default (usually <code>src</code>) - Config path: Location of pyproject.toml relative to current directory</p>"},{"location":"tutorials/#3-your-first-lint-run","title":"3. Your First Lint Run","text":"<p>Run a complete code quality check:</p> <pre><code>tidy-cli lint run\n</code></pre> <p>This executes: - Ruff: Fast Python linter and formatter - MyPy: Static type checking - Pydoclint: Docstring validation</p>"},{"location":"tutorials/#4-auto-fixing-issues","title":"4. Auto-fixing Issues","text":"<p>Let Tidy CLI fix what it can automatically:</p> <pre><code>tidy-cli lint run --fix\n</code></pre>"},{"location":"tutorials/#5-running-tests","title":"5. Running Tests","text":"<p>Execute your test suite with coverage:</p> <pre><code>tidy-cli pytest run\n</code></pre>"},{"location":"tutorials/#complete-workflow","title":"Complete Workflow","text":""},{"location":"tutorials/#new-project-setup","title":"New Project Setup","text":"<pre><code>mkdir my-project &amp;&amp; cd my-project\nmkdir src tests\ntidy-cli init  # Follow prompts\ntidy-cli lint run --fix\n</code></pre>"},{"location":"tutorials/#existing-project","title":"Existing Project","text":"<pre><code>cd existing-project\ntidy-cli init\ntidy-cli lint run --interactive  # Review each tool\n</code></pre>"},{"location":"tutorials/#runtime-configuration-override","title":"Runtime Configuration Override","text":"<pre><code># Override settings temporarily without changing saved configuration\ntidy-cli lint run --default-dir backend/src\ntidy-cli pytest run --default-dir backend/tests --pyproject-path backend/pyproject.toml\n</code></pre>"},{"location":"tutorials/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about specific commands</li> <li>Explore configuration options</li> <li>Understand the concepts behind Tidy CLI</li> </ul>"}]}